

### Step-by-Step Guide to Set Up and Run ResuWhisper AI (Installing Libraries via Python)

#### Overview
ResuWhisper AI is a voice-based resume-building application built with Python and Streamlit. It uses Google’s Gemini API for transcription and content generation, records audio, and generates professional resumes in Word or PDF formats. This guide is beginner-friendly and will help you set up the environment, install dependencies using a Python script, and run the project on your local machine.

---

### Step 1: Prerequisites
Before you begin, ensure you have the following installed on your system:

1. **Python 3.8 or higher**
   - Download and install from [python.org](https://www.python.org/downloads/).
   - Verify installation: Open a terminal/command prompt and run:
     ```
     python --version
     ```
     or
     ```
     python3 --version
     ```

2. **Git (Optional)**
   - To clone repositories or manage code versions. Install from [git-scm.com](https://git-scm.com/downloads).
   - Verify: `git --version`

3. **A Text Editor or IDE**
   - Recommended: Jupyter Notebook, Visual Studio Code, or any text editor like Notepad++.
   - This guide will use Jupyter Notebook as an example.

4. **Google API Key**
   - Sign up for a Google Cloud account and enable the Gemini API (or equivalent generative AI API).
   - Obtain an API key from the Google Cloud Console and replace the placeholder `Google_API_Key` in the code with your key.

5. **System Requirements**
   - A microphone (for recording audio).
   - Internet connection (for API calls).

---

### Step 2: Set Up Your Project Directory
1. **Create a Project Folder**
   - On your computer, create a folder named `ResuWhisperAI` (e.g., `C:\ResuWhisperAI` on Windows or `~/ResuWhisperAI` on macOS/Linux).

2. **Save the Main Code**
   - Copy the provided Python code into a file named `app.py`.
   - Save `app.py` inside the `ResuWhisperAI` folder.

3. **Create a Setup Script**
   - Create a new file named `setup.py` in the same `ResuWhisperAI` folder.
   - Add the following code to `setup.py`:
     ```python
     import subprocess
     import sys

     # List of required libraries
     required_libraries = [
         "streamlit",
         "google-generativeai",
         "sounddevice",
         "numpy",
         "python-docx",
         "docx2pdf",
         "reportlab"
     ]

     def install_libraries():
         print("Installing required libraries...")
         for library in required_libraries:
             try:
                 subprocess.check_call([sys.executable, "-m", "pip", "install", library])
                 print(f"Successfully installed {library}")
             except subprocess.CalledProcessError as e:
                 print(f"Error installing {library}: {e}")
         print("Library installation complete!")

     if __name__ == "__main__":
         install_libraries()
     ```
   - Save `setup.py`.

---

### Step 3: Set Up a Virtual Environment
A virtual environment keeps project dependencies isolated.

1. **Create a Virtual Environment**
   - Open a terminal/command prompt and navigate to the `ResuWhisperAI` folder:
     ```
     cd path/to/ResuWhisperAI
     ```
     Replace `path/to/ResuWhisperAI` with the actual path (e.g., `cd C:\ResuWhisperAI`).
   - Run:
     ```
     python -m venv venv
     ```

2. **Activate the Virtual Environment**
   - **Windows:**
     ```
     venv\Scripts\activate
     ```
   - **macOS/Linux:**
     ```
     source venv/bin/activate
     ```
   - After activation, your terminal prompt should show `(venv)`.

---

### Step 4: Install Required Libraries Using Python
Instead of using the terminal to run `pip install`, you’ll run the `setup.py` script to install libraries, with Jupyter Notebook as an example environment.

1. **Install Jupyter Notebook (If Not Already Installed)**
   - In the terminal (with the virtual environment activated), run:
     ```
     python -m pip install jupyter
     ```
   - This allows you to use Jupyter Notebook to run the setup script.

2. **Launch Jupyter Notebook**
   - In the terminal, run:
     ```
     jupyter notebook
     ```
   - Your default web browser will open to the Jupyter interface (usually `http://localhost:8888`).

3. **Run the Setup Script in Jupyter Notebook**
   - In the Jupyter interface:
     - Click "New" > "Python 3" to create a new notebook.
     - In the first cell, paste the following code to run `setup.py`:
       ```python
       %run setup.py
       ```
     - Press `Shift + Enter` to execute the cell.
   - Alternatively:
     - Upload `setup.py` to Jupyter by dragging it into the file browser.
     - Open `setup.py` and click the "Run" button (▶) in the toolbar.
   - The script will install the following libraries:
     - `streamlit`: Builds the web interface.
     - `google-generativeai`: Connects to Google’s Gemini API.
     - `sounddevice`: Records audio from your microphone.
     - `numpy`: Handles audio data processing.
     - `python-docx`: Generates Word documents.
     - `docx2pdf`: Converts Word files to PDF.
     - `reportlab`: Generates PDF files directly (for the Veteran template).

4. **Verify Installation**
   - After running `setup.py`, you’ll see output in the notebook like:
     ```
     Installing required libraries...
     Successfully installed streamlit
     Successfully installed google-generativeai
     ...
     Library installation complete!
     ```
   - If errors occur, note the library name and see the troubleshooting section.

---

### Step 5: Configure the API Key
1. **Replace the API Key**
   - Open `app.py` in your text editor or Jupyter Notebook (upload it to Jupyter and edit there).
   - Find the line:
     ```
     Google_API_Key = "AIzaSyCw8tLyHeobBO65GGnkLUVCGSMLdg-HsBw"
     ```
   - Replace the placeholder key with your actual Google API key:
     ```
     Google_API_Key = "your-actual-api-key-here"
     ```

2. **Save the File**
   - If editing in Jupyter, click "File" > "Save" or "Download as" > "Python (.py)" and overwrite `app.py` in the folder.

---

### Step 6: Add the Logo Image
The code references an image file (`resuwhisper.jpg`) for the app icon.

1. **Obtain or Create the Image**
   - Download or create an image named `resuwhisper.jpg` (e.g., a 100x100 pixel logo).
   - Alternatively, use an existing image and update the path in the code.

2. **Update the Image Path**
   - In `app.py`, find:
     ```
     st.image("C:\\Users\\shree\\OneDrive\\Desktop\\python\\resuwhisper.jpg", width=100, caption="ResWhisper Icon")
     ```
   - Replace the path with the actual location of your `resuwhisper.jpg` file, e.g.:
     ```
     st.image("C:/path/to/your/resuwhisper.jpg", width=100, caption="ResWhisper Icon")
     ```
   - Use forward slashes (`/`) or double backslashes (`\\`) for Windows paths.

3. **Save the File**
   - Save `app.py` after updating the path (download from Jupyter if edited there).

---

### Step 7: Run the Application
1. **Start the Streamlit Server**
   - With the virtual environment activated, run the app via the terminal (not Jupyter, as Streamlit requires a terminal):
     - In the terminal:
       ```
       streamlit run app.py
       ```

2. **Access the App**
   - Your default web browser should open to `http://localhost:8501`.
   - If it doesn’t, manually open a browser and navigate to `http://localhost:8501`.

3. **Interact with the App**
   - Follow the on-screen instructions:
     - Log in or sign up.
     - Select a language and resume template.
     - Answer questions via voice recording, audio upload, or text input.
     - Preview and download your resume.

---

### Step 8: Troubleshooting
If you encounter issues, try these solutions:

1. **"ModuleNotFoundError"**
   - Rerun `setup.py` in Jupyter Notebook to ensure all libraries installed correctly.
   - Verify the virtual environment is activated before launching Jupyter.

2. **API Key Errors**
   - Double-check your Google API key in `app.py` and ensure your account has Gemini API access.

3. **Audio Recording Issues**
   - Ensure your microphone is connected and working.
   - Check system audio permissions.

4. **Image Not Found**
   - Verify the image path in `app.py` matches the actual file location.

5. **PDF Conversion Fails**
   - Ensure `docx2pdf` installed correctly via `setup.py`. On Windows, you may need Microsoft Word installed.

6. **General Errors**
   - Add this line to the top of `setup.py` and rerun in Jupyter to update `pip`:
     ```python
     subprocess.check_call([sys.executable, "-m", "pip", "install", "--upgrade", "pip"])
     ```

---

### Step 9: Customize and Enhance (Optional)
- **Add More Templates**: Modify the `generate_*_resume` functions in `app.py`.
- **Improve UI**: Adjust the CSS in the `st.markdown` block.
- **Database Integration**: Replace the in-memory `users_db` with a real database (e.g., SQLite).

---

### Step 10: Shut Down the App
1. **Stop the Server**
   - In the terminal, press `Ctrl+C`.

2. **Deactivate the Virtual Environment**
   - In the terminal, run:
     ```
     deactivate
     ```

---

### Sample Execution Flow
1. Create `ResuWhisperAI` folder and save `app.py` and `setup.py`.
2. Terminal: `cd C:\ResuWhisperAI`
3. Terminal: `python -m venv venv`
4. Terminal: `venv\Scripts\activate` (Windows) or `source venv/bin/activate` (macOS/Linux)
5. Terminal: `python -m pip install jupyter`
6. Terminal: `jupyter notebook`
7. In Jupyter: Run `%run setup.py` in a cell to install libraries.
8. Edit `app.py` with your API key and image path (in Jupyter or a text editor).
9. Terminal: `streamlit run app.py`
10. Browser: Go to `http://localhost:8501`, sign up, and build your resume!

---

### Notes
- The app’s date is hardcoded to March 31, 2025. Update it in `app.py` if needed.
- Ensure disk space for temporary files (audio, Word, PDF).
- This guide is for local setup. 
---


